#!/usr/bin/env python
# -*- coding: utf-8 -*-
import subprocess
import argparse
import os.path
from bs4 import BeautifulSoup
import pprint
import logging
import sys

__version__ = '1.1.0'
__author__ = 'SamK'

logger = logging.getLogger()
log_console = logging.StreamHandler()
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(levelname)s - %(message)s')
log_console.setFormatter(formatter)
logger.addHandler(log_console)


class NfoTemplate(object):
    template = None
    engines = ['jinja2', 'mako', 'cheetah']

    def __init__(self, template_str=None):
        self.template_str = template_str
        pass

    def render_jinja2(self, albumdata):
        import jinja2
        self.template = jinja2.Template(self.template_str)
        return self.template.render(tracklist=albumdata['tracklist'],
                                    album=albumdata['album'])

    def render_mako(self, albumdata):
        import mako.template
        self.template = mako.template.Template(self.template_str)
        return self.template.render(tracklist=albumdata['tracklist'],
                                    album=albumdata['album'])

    def render_cheetah(self, albumdata):
        from Cheetah.Template import Template
        t = Template(self.template_str)
        t.tracklist = albumdata['tracklist']
        t.album = albumdata['album']
        return str(t)

    def detect_engine(self, filename):
        if filename:
            extension = os.path.splitext(filename)[1][1:]
            self.template_engine = extension

    def render(self, tracklist, album):
        method_name = 'render_' + self.template_engine
        try:
            logger.info('About to render with engine "{}".'.
                        format(self.template_engine))
            method = getattr(self, method_name)
        except AttributeError:
            logger.critical('Unknown template engine "{}".'.
                            format(self.template_engine))
            sys.exit(1)
        else:
            albumdata = {'tracklist': tracklist, 'album': album}
            try:
                return method(albumdata)
            except:
                logger.critical("Something failed with the \
                                template rendering...")
                raise

class Album(object):
    title = '?'
    track_title_maxlen = '0'
    ripper = '?'
    Audio_Codec_List = 'unknown'
    OverallBitRate_Mode_String = 'none'
    channels = ''
    def __init__(self):
        pass

    def __getitem__(self, item):
        return getattr(self, item)

class Song(object):
    title_len = '0'
    def __init__(self):
        pass
    def __getitem__(self, item):
        return getattr(self, item)



class Nfo(object):
    tracklist = []
    template = None

    def __init__(self):
        self.album = Album()
        pass

    def __str__(self):
        # Choose the template file
        if self.template:
            # User specified a specific template
            txt = open(self.template)
            template_str = txt.read()
        template = NfoTemplate(template_str)

        template.detect_engine(self.template)

        logger.debug("Using template engine {}".
                     format(template.template_engine))

        # render template and return result
        return template.render(
            tracklist=self.tracklist,
            album=self.album)

    def apply_attributes(self):
        # get data from first track
        t = self.tracklist[0]
        self.album.Artist = t.Performer
        self.album.Performer = t.Performer
        self.album.Album = t.Album
        self.album.title = t.Album
        self.album.Genre = t.Genre
        self.album.Format = t.Format
        self.album.Recorded_Date = t.Recorded_Date

        # channels
        chans = []
        try:
            chans.append('{} channels'.format(t['Channel_s_']))
        except:
            pass
        try:
            chans.append('{}'.format(t['SamplingRate_String']))
        except:
            pass
        try:
            chans.append('{} bits'.format(t['BitDepth']))
        except:
            pass
        self.album.channels = ' / '.join(chans)

        # ripper
        try:
            self.album.ripper = t.Encoded_Library_String
        except:
            self.album.ripper = t.EncodedBy

        # codec
        codecs = []
        codec_fields = ['Format_Commercial', 'Codec_Info', 'Codec_String',
                        'Audio_Codec_List', 'Format', 'Format_Info']

        for codec_field in codec_fields:
            if codec_field in dir(t):
                codecs.append('({})'.format(t[codec_field]))

        if codecs:
            self.album.codec = ' '.join(codecs)
        else:
            self.album.codec = None

    def load_template(self, template_str):
        self.template = template_str

    def parse(self, xmldata):
        soup = BeautifulSoup(xmldata, 'xml')

        # Loop over "<File>"
        for tag_file in soup.find_all('File'):

            mediafile = Song()

            # Gather all the properties of the track
            for tag_properties in tag_file.find_all(True):
                #track[tag_properties.name] = tag_properties.contents[0]
                setattr(mediafile, tag_properties.name, tag_properties.contents[0])

            # <File> must contain <track type="Audio">
            # otherwise, skip it
            tag_file.find_all('track')
            found = False
            for tag_track in tag_file.find_all('track'):
                if 'Audio' in tag_track.get('type'):
                    found = True

            if not found:
                # the file has no "Audio" property there for not considered as an
                # audio file: forget the gathering, skip everything and
                # continue the loop with another file
                logging.info('Skipping not Audio file "{filename}"'.
                             format(filename=mediafile.CompleteName))
                continue

            try:
                dummy = mediafile.Track_Position
            except AttributeError:
                logger.critical('Missing track number for file {0}'.
                                format(mediafile.CompleteName))
                sys.exit(1)

            # update the "track_name_len" home-made property
            mediafile.title_len = str(len(mediafile.Track))

            # update the NFO 'track_title_maxlen' home-made property
            longest_trackname =   str(max(int(self.album.track_title_maxlen), int(mediafile.title_len)))

            self.album.track_title_maxlen = longest_trackname

            # finally, add the track to the list of tracks
            self.tracklist.append(mediafile)

        # sort tracks
        self.tracklist.sort(key=lambda k: int(k.Track_Position))

        # sanity check
        if len(self.tracklist) == 0:
            logging.critical('No media file found!')
            sys.exit(1)

        # Assign album properties to album
        self.apply_attributes()


def _pprint(stuff):
    pprint.pprint(stuff)


def parse_arguments():
    global __author__
    global __version__

    engines = ', '.join(NfoTemplate().engines)
    version_string = "%(prog)s-%(version)s by %(author)s" % \
        {"prog": "%(prog)s", "version": __version__, "author": __author__}

    parser = argparse.ArgumentParser(description="Build a nice nfo")
    parser.add_argument('-p', '--properties', action='store_true')
    parser.add_argument('music', help='the music directory (or files)')
    parser.add_argument('template',
                        help="Select a template file. Supported engines: {}.".
                        format(engines))
    parser.add_argument('-o', '--outfile',
                        help="Output file (default: stdout)")
    parser.add_argument('-V', '--version', action='version',
                        help="shows program version", version=version_string)
    parser.add_argument('-v', '--verbose', action='count', default=0)
    return parser.parse_args()


def main():
    args = parse_arguments()
    global logger

    # Set logger level
    if args.verbose == 0:
        logger.setLevel(logging.WARNING)
    elif args.verbose == 1:
        logger.setLevel(logging.INFO)
    elif args.verbose >= 2:
        logger.setLevel(logging.DEBUG)

    logger.debug('Enabling debug mode.')

    # Exit if args.music does not exist
    if not os.path.exists(args.music):
        logger.critical('No such file or directory: "{}"'.format(args.music))
        sys.exit(1)

    # If user provided a folder (not a file), it must not be empty
    if os.path.isdir(args.music) and not os.listdir(args.music):
        logger.critical("Provided music folder is empty.")
        sys.exit(1)

    xmldata = subprocess.check_output(["mediainfo",
                                       "--output=XML",
                                       "--Full",
                                       "--Language=raw",
                                       args.music])
    nfo = Nfo()
    nfo.load_template(args.template)
    nfo.parse(xmldata)

    if args.properties:
        # User just wants to print properties
        print "Album properties:"
        print "-----------------"
        for key in nfo.album.__dict__.keys():
            print key
        print
        print "Tracks properties:"
        print "------------------"
        for key in nfo.tracklist[0].__dict__.keys():
            print key
    else:
        if args.outfile:
            f = open(args.outfile, 'w')
            f.write(str(nfo))
            f.close()
        else:
            sys.stdout.write(str(nfo))
    logger.info('nfo file generated')

if __name__ == '__main__':
    main()
